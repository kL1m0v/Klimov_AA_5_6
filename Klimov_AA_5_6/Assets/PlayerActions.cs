//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Car
{
    public partial class @PlayerActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""CarControl"",
            ""id"": ""b35aeec6-5248-475c-8473-3789a79c6352"",
            ""actions"": [
                {
                    ""name"": ""ForwardOrReverse"",
                    ""type"": ""Value"",
                    ""id"": ""9e1d35cb-9478-4c04-930c-1cb8785dd64e"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TurningWheel"",
                    ""type"": ""Button"",
                    ""id"": ""0d2ee3ca-c066-4c3a-bc2e-0687c9f4112a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""4cc443cb-a4ab-4af6-b70d-60b5bd2af3c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WS"",
                    ""id"": ""e4986152-65e4-490d-89b3-a8a415b23d6c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardOrReverse"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0bef83d7-984d-4cb4-a0e8-256fd0dedf7b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardOrReverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""803bf195-8276-4dda-8a60-dc2d3ff03076"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardOrReverse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""a123c33d-5a7a-4f75-a1eb-13e4f3f32cd0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurningWheel"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d5ba0664-112b-4b07-bd37-b5f5ba5b29ff"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurningWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6bee49e5-d862-4461-ab9d-66d897a48498"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TurningWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""72fa5197-6475-463b-935e-fc27310c7a8c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // CarControl
            m_CarControl = asset.FindActionMap("CarControl", throwIfNotFound: true);
            m_CarControl_ForwardOrReverse = m_CarControl.FindAction("ForwardOrReverse", throwIfNotFound: true);
            m_CarControl_TurningWheel = m_CarControl.FindAction("TurningWheel", throwIfNotFound: true);
            m_CarControl_Brake = m_CarControl.FindAction("Brake", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CarControl
        private readonly InputActionMap m_CarControl;
        private List<ICarControlActions> m_CarControlActionsCallbackInterfaces = new List<ICarControlActions>();
        private readonly InputAction m_CarControl_ForwardOrReverse;
        private readonly InputAction m_CarControl_TurningWheel;
        private readonly InputAction m_CarControl_Brake;
        public struct CarControlActions
        {
            private @PlayerActions m_Wrapper;
            public CarControlActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @ForwardOrReverse => m_Wrapper.m_CarControl_ForwardOrReverse;
            public InputAction @TurningWheel => m_Wrapper.m_CarControl_TurningWheel;
            public InputAction @Brake => m_Wrapper.m_CarControl_Brake;
            public InputActionMap Get() { return m_Wrapper.m_CarControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CarControlActions set) { return set.Get(); }
            public void AddCallbacks(ICarControlActions instance)
            {
                if (instance == null || m_Wrapper.m_CarControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CarControlActionsCallbackInterfaces.Add(instance);
                @ForwardOrReverse.started += instance.OnForwardOrReverse;
                @ForwardOrReverse.performed += instance.OnForwardOrReverse;
                @ForwardOrReverse.canceled += instance.OnForwardOrReverse;
                @TurningWheel.started += instance.OnTurningWheel;
                @TurningWheel.performed += instance.OnTurningWheel;
                @TurningWheel.canceled += instance.OnTurningWheel;
                @Brake.started += instance.OnBrake;
                @Brake.performed += instance.OnBrake;
                @Brake.canceled += instance.OnBrake;
            }

            private void UnregisterCallbacks(ICarControlActions instance)
            {
                @ForwardOrReverse.started -= instance.OnForwardOrReverse;
                @ForwardOrReverse.performed -= instance.OnForwardOrReverse;
                @ForwardOrReverse.canceled -= instance.OnForwardOrReverse;
                @TurningWheel.started -= instance.OnTurningWheel;
                @TurningWheel.performed -= instance.OnTurningWheel;
                @TurningWheel.canceled -= instance.OnTurningWheel;
                @Brake.started -= instance.OnBrake;
                @Brake.performed -= instance.OnBrake;
                @Brake.canceled -= instance.OnBrake;
            }

            public void RemoveCallbacks(ICarControlActions instance)
            {
                if (m_Wrapper.m_CarControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICarControlActions instance)
            {
                foreach (var item in m_Wrapper.m_CarControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CarControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CarControlActions @CarControl => new CarControlActions(this);
        public interface ICarControlActions
        {
            void OnForwardOrReverse(InputAction.CallbackContext context);
            void OnTurningWheel(InputAction.CallbackContext context);
            void OnBrake(InputAction.CallbackContext context);
        }
    }
}
